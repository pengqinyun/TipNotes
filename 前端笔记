实战tips：

在Axios中不能直接调用this，需要先设一个var foo = this，后续所有this都用foo来指代（可能是axios协议的问题）

基本的json格式是[{key:val, key:val, key:val},{},{},...]

this调用父类时，可能会因为嵌套层次太深而出现调用不清的情况（譬如{}镶套太深了，其实调用的是祖父类，却使用了this），这种情况需要明确祖父类，即var foo=this

Javascript竟然是一个单线程处理语言....所以同步使用好几个Ajax时，线程之间的先后会出人意料，可以使用async：false来强制浏览器完成某一段ajax，或者用promise
但是傻逼Axios就没有这么激灵了，于是机智如我只好在axios里面循环嵌套，所以对于股价的接入接口，一定要慎之又慎了，哎..

v-model="foo[3].attr"这样写是完全可以的，但一定要保证return存在，否则javascript报错

Django template也可以display各种form errors，假设使用了{{ form.as_p }}
{{ form.non_field_errors }}可以显示non_field
<ul class="errorlist nonfield">
    <li>Generic validation error</li>
</ul>
前端显示会额外赋予nonfield class来做处理，但其实都是error，没那么必要

{{ form.name_of_field.errors }} 可以具体显示某个field的error
具体显示时，会以如下形式：
<ul class="errorlist">
    <li>Sender is required.</li>
</ul>
所以可以改errorlist的CSS来改前端

资讯可以做成button，看起来还不错

<script>中好像可以直接用global var foo = {{...}}来提取template variables

websocket归websocket，用ajax可读性更强，Vue归Vue，不要和websocket混用（容易看不懂）

关于Forms：
使用Django自带的forms主要是为了他自带的validation，其实前端输出很多涉及到style，input type等信息，全在forms里define可读性简直了，完全可以前端自己写，
把name甚至id（其实不是很必要）看准了就行，这样可读性也好很多

关于ICONS：
设计的icon以unicode形式引用没有问题，但是每次新增时很麻烦，所以后续的icons都统一用阿里云矢量图在线项目好了，记得是以微博登录的

关于CSS缓存：
ctrl+F5,强制刷他妈的

使用了Axios的地方：
----3级联动菜单
----清空通知，清空好友消息通知
注意一定要有前缀http://,不然header不知道什么协议，后续转https时要更改
