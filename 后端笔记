关于timezone:
本座直接使用了django的timezone，即“按照用户所在时区返还用户当下的日期和时间”，这对于处理世界市场来说是django已经造好的轮子，不需要再担心白农们调夏令
时冬令时，但同时可能带来的安全问题，后期要注意


关于slug：
思考再三，还是需要slug，用以显示个人页面（或者说用以以某一个账号访问别的账号的个人页面），但考虑到username可能是中文，所以下了uuslug插件，之后再进行
请求时，务必记得先slugify(username)
使用slug的主要考虑是，
1,url中参数的传递和显示，很多时候需要浏览器的参与，当中文用户被英文浏览器搜索的时候，会有很多衍生问题，所以干脆一劳永逸了
2,url中传递的只能是string，不能是object，所以反正要在views里convert的，不如直接统一用slug，后续如果有直接读写该页面的需求也更好做
3，很多外接语言，端口的调用，通常的汉字虽然也能传递，但涉及到一些偏僻字符时，就可能会报错了


关于日期：
再holdings和money关系中都涉及到对日期的判断，所以本座自制了两个相关的property，前端templates中直接调用就好了
datetime有很多种操作，譬如datetime.date.today()，datetime.year，本座用了datetime.datetime.now()和datetime.timedelta（hours=），注意import时候
直接import datetime就好


关于form：
一般的form直接写到forms.py就好了，这样django会自动加上cleaned_data方法，整个app也更organized，当然硬要在视图里强敲也不是不行


关于订阅subscribe:
有订阅功能的个人页面在subscribe里面，本座设置了login_required，如果是给未登录用户看的个人页面，后期写在users里面算了，subscribe处理订阅逻辑，users
处理浏览逻辑


friendship插件：
因为该package有request, reject等功能，所以“谁加了谁”当好友还有一个审批的过程，所以add的时候有两个方向，都要注意


Django-channel和chat系统：

一开始的困惑在于asgiref，需要更新到最新版本，后续部署时这一点可能需要注意
传输过程中基本上在用各种JSON，前端用了JSON.parse（收）和JSON.stringify（发），后端用了json.loads（收）和json.dumps
这么做的原因在于，前后端传输的不只是text，还有username/roomname等信息，后续拓展时还可以加入各种别的信息，格式涉及到dict，以后还可能涉及到float，int等等
如此传输可以保障python和javascript之间数据的无缝转换

任何新的聊天线程（群组，私聊）都以group_add为发起，add的一方固定为该request.user（储存在socket的self.scope['user']里），另一方为群组或其他用户
然后主要的逻辑再group_send里面，第一个parameter是send的对象，私聊的就send私聊，群聊的就send群聊

notification系统也有group_send，不光贪简单，用户在不同的设备登录时，都可以收到notification

买卖过程中需要创建相关的notification并向所有粉丝广播该notification，比较有意思的是广播环节一定要hardcode，主要是timestamp不好处理，因为model中
timestamp是伴随着save方法自动生成的，如果再导出来，其实就为了dry而dry了，还增加了数据库负担，所以这一步直接hardcode，没什么问题

关于trade的逻辑：
使用Forms一般伴随着input，也就是需要用户输入一些信息，那么利用上Django自带的过滤系统，即便捷也安全。
然而针对买卖情况，用户并不需要输入任何信息，传输的关键参数在url里面，因此参数取值时做好安全措施即可，后续的判断逻辑写的周全一些，能保万无一失，强行
使用forms，还必须刷新页面，牺牲了宝贵的用户体验，因此还是决定，诸如此类操作，皆用Ajax完成
