
--------------------------------------------------------------------------------------------------------------------------------------------------

filter返还的是一个queryset，因为可能有好几个符合条件的对象，如果要精确定位某一个对象，用get_object_or_404

pandas本是一个处理大数据的插件，有各种matrices方法可以调用，但素！因为django自带的Json解码在应对中文编码时简直是一坨屎，所以本座还是捏着鼻子用了pandas，
至于xlrd还不错，可以直接用.原始录入的院校，省市信息，本座都存到了“冲天流程”这个文件夹中

搜索框相关:

F(stocks.price)指代旧的price，用于进行一些操作，譬如stocks.price=F(stocks.price)+2

Q()是指封装某个query，以便后续进行逻辑组合，譬如 Q(..) | ~Q(..),其中~表示not
Q(pub_date=date(2005, 5, 2)) | Q(pub_date=date(2005, 5, 6)), question__startswith='Who')， Q（）可以传递更具体的参数，但要注意放到最前

AsyncIO:
单线程编程只能运用CPU算力的10%左右，要释放应用更多算力，async是解决办法


Django channel的consumer中使用了如下代码：
-------------------------------------------------------------------------------
    try:
        PrivateConsumer.members[self.group_name].add(self.socket)      
    except:                                                             
        PrivateConsumer.members[self.group_name] = set([self.socket])   
---------------------------------------------------------------------------------
这个代码有意思在，它规避了所有的报错，来试着分析一下
members是该consumer class里自定义的literable dict，字典格式。如果该键位上（members[self.group_name]）为空的话，add方法失效，所以第一次新建走
except逻辑，在该键位上新建set([self.socket])，其中self.socket是一个user object，然而set()函数只接受iliterable variable，所以要把user object
list化，加上[]封装，变成一个user object的list representation
后续的add里面，会自动把object转化成list representation，所有不必操心这一点。当该group_name键位上不为空时，add方法生效，检验该键位是否有同样的value
如果有，则什么都不做，如果没有，则在该键位上加上新value
总体来说，这是一个很高效简洁的设计



* 关于M2M： 
  manyTomany relationship一定要非常重视！我几次database弄崩都是因为这个屌东西！
  Rule#1：使用through和第三方辅助模型完成M2M，以便日后拓展！(主要是日后可能在M2M关系中夹带字段)


