Vue是基于javascript上编出的应用工具，所以先从javascript的一些特性记起：

定义function时，其实不用太考虑scope，哪怕你写的是var，该variable也只能在function里面access，这是javascript的compile机制决定的，需要注意的是所谓的
block scope，即if(...){var foo = ...},此处的foo是可以在document里面access的,即是所谓的Hoisting机制

Hoisting概括来讲，就是把varibale的定义步骤和function的执行步骤全部提高优先执行，variable的赋值步骤则随后执行
所以基于hoisting，我们应该尽量写anonymous functions，譬如
        var a = function(){.........}
此时会加载a的定义步骤，但除非具体执行该function，否则不会加载function

let person = new Object() ----------- 定义Object



基础tips：

为了与django template做区分，在每个Vue instance中设置   delimiters: ['[[', ']]']
混用{{}}和[[]]是会报错的，也是一种不好的coding风格
在整个vue instance中，data可以随时通过 this.foo 调用
每个Vue instance只负责一个区域，这是Vue的优势之一（降低耦合）

对HTML tags中的attribute，如href=""，直接调用[[]]是不行的，需要用data binding，正确姿势是v-bind:href="fooname"，注意不需要再使用[[]]
如果想直接敲HTML源码（本座也不知道为什么有人要这样），正确的调用姿势是<p v-html:fooname></p>

<button v-on:click="foo">通过点击调用一个method，不需要foo()，然而如果直接调用，[[foo()]]还是要括号的
event object是javascript中自带的，记录了鼠标的移动点击等信息，可以通过console.log来查看，每一个event（mouseclick等）都继承event object，故可以调用
其中信息
event modifier，如v-on:click.once，可以限定这个event只被激活一次，比较常用的是.prevent
v-on:keyup.alt.enter可以追综所有的keyup事件，但只有在同时按下alt和enter后才会fire

<input type="text" v-model="foo">是双向绑定，譬如说在<p>[[foo]]</p>中我们display了foo，那前面的input就可以用来随时改动该foo
如果直接用[[foo()]]并且foo() depends on data中的foo的话，每一次foo变，Vue都会重新跑一次foo()，非常的inefficient，所以，这时候用computed property
computed:{}格式基本和method一样，只是computed properties只会盯着相关的data，节省很多资源,computed property在[[]]中是当作property玩

<...v-on:click="foo=!foo" v-bind:class="{'available':foo}"...>此处foo是个boolean值，当设定为true时，该tag具备这个class，反之则不具备这个特性可以
用来做红白，黑银两套UI
<p v-if="foo">foo为true时显示，false时不显示，后续还可以加v-else-if，不过elseif只在第一个if为false时fire
v-show和v-if类似，区别是v-show是设置display：none而v-if是彻底删掉

<li v-for="(foo,index) in foos">[[ index ]].[[ foo.anyname ]]</li>
<template v-for="nigger in niggers">
  <div v-for="(val,key) in nigger">
    <p>[[key]].[[val]]</p>
  </div>
</template>
template tag本身不做任何html操作，只是一个container的角色，用以进行一定的逻辑

var foo = new Vue({}) 可以建立好几个Vue instance，这样子在别的Vue instance中，可以通过foo.data来access
Vue.component('greeting',{});  在HTML中，<greeting></greeting>可以调用该component
对于checkbox，在每一个<input type="checkbox" value="foo1" v-model="foo">中都使用foo，然后在Vue中设立foo=[]为一个array
对于selectbox，<select v-model="foo">，如此每一个<option>被选中时，都会传导相应数值到foo中

[[ foo|snippet ]] 可以自制filter，格式是
Vue.filter("snippet", function(value){                    # 此处value特指的就是foo
  return value.slice(0,100) + '...';
})

自制搜索栏，<input type="text" v-model="search>,原本的是<... v-for="blog in filteredblogs" ...>
computed:{
  filteredBlogs:function(){
    return this.blogs.filter((blog)=>{
      return blog.title.match(this.match);                # 如果是true，则stay，反之则消失
    });
  }
}
所以整个逻辑是，先从后端传来blogs，然后前端针对this.blogs做定制操作，其实还是比较简单直白的

或者用ref：
前端用ref绑定   <input type="text" ref='foo'>
Vue里处理       this.$refs.foo.value               除了value还有innerHTML等属性


Javascript的时间机制：

new Date("2015-04-12")

零星的知识点
-----continue是继续下一个父系迭代，break是停止整个迭代
-----可以用一个function(abc)来拆分一个list，使之成为一个dictionary，调用时，foo.abc



